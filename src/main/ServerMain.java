package main;

import functions.Client;
import functions.IpAPI;
import functions.Method;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.BindException;
import java.net.ServerSocket;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import menubar.about_form;

/*
 * The MIT License
 *
 * Copyright 2021 Neeraj.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/**
 *
 * @author Neeraj
 */
public class ServerMain extends javax.swing.JFrame
{

    private static final long serialVersionUID = 1L;
    private DateTimeFormatter forStamping = DateTimeFormatter.ofPattern("HH:mm:ss");
    private DateTimeFormatter forlog = DateTimeFormatter.ofPattern("dd-MMMM-yyyy");
    private File logDir = new File("logs");
    private File dataDir = new File("data");
    private String logFileName = "Server-" + forlog.format(LocalDateTime.now()) + "_LOG.txt";
    private File logFile = new File(logDir + File.separator + logFileName);
    // FileUtils.writeStringToFile(file, "String to append", true);
    private BufferedWriter logFileWriter;
    private ServerSocket ss;
    private Thread run;
    private boolean isAlreadyEntered;
    private int port = 0;

    public ServerMain()
    {
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            //UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            //will set the default installed l&F as windows Native
        }
        catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex)
        {
            Logger.getLogger(ServerMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        date_now.setText(DateTimeFormatter.ofPattern("dd-MM-yyyy").format(LocalDateTime.now()));
        Timer timer = new Timer();
        TimerTask task = new TimerTask()
        {
            @Override
            public void run()
            {
                time_now.setText(DateTimeFormatter.ofPattern("hh:mm:ss a").format(LocalDateTime.now()));
            }
        };
        timer.scheduleAtFixedRate(task, 1000, 1000);
        CurrStatus.append("------------------------------------------------[Started]-------------------------------------------------\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        portNumber = new javax.swing.JLabel();
        serverStartBtn = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        portField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        serverPass = new javax.swing.JLabel();
        passField = new javax.swing.JTextField();
        activeUsers = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        public_Ip_Port = new javax.swing.JTextField();
        loc_Ip_Port = new javax.swing.JTextField();
        refreshBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        serverStatus = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        serverStopBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CurrStatus = new javax.swing.JTextArea();
        date_now = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        time_now = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        aboutMenu = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CodyNeeraj's Socketty");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Select IP");

        portNumber.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        portNumber.setText("Enter Port");

        serverStartBtn.setBackground(new java.awt.Color(0, 204, 0));
        serverStartBtn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        serverStartBtn.setText("Start");
        serverStartBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                serverStartBtnActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setText("Localhost (127.0.0.1)");
        jTextField1.setToolTipText("Default");

        portField.setToolTipText("Possibility of non-availability of specified port\\n as being used by some another application at the same time , You are requested \\n to change it to some other value \\n (The common unsused values are from 1000 - 65535 )");

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel3.setText("(10-65535)");
        jLabel3.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 1, 15)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Configuration");

        serverPass.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        serverPass.setText("Password");

        activeUsers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));
        activeUsers.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                activeUsersActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Server");

        public_Ip_Port.setEditable(false);
        public_Ip_Port.setFont(new java.awt.Font("Segoe UI Semibold", 0, 11)); // NOI18N
        public_Ip_Port.setText("Loading...");

        loc_Ip_Port.setEditable(false);
        loc_Ip_Port.setFont(new java.awt.Font("Segoe UI Semibold", 0, 11)); // NOI18N
        loc_Ip_Port.setText("Loading...");
        loc_Ip_Port.addAncestorListener(new javax.swing.event.AncestorListener()
        {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt)
            {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt)
            {
                loc_Ip_PortAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt)
            {
            }
        });

        refreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh.png"))); // NOI18N
        refreshBtn.setToolTipText("Refresh");
        refreshBtn.setEnabled(false);
        refreshBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                refreshBtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel5.setText("Local IP :");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel6.setText("Public IP :");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel10.setText("Current Status");

        serverStatus.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        serverStatus.setForeground(new java.awt.Color(255, 0, 0));
        serverStatus.setText("Not Running..");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel12.setText("Active Clients");

        serverStopBtn.setBackground(new java.awt.Color(255, 153, 153));
        serverStopBtn.setFont(new java.awt.Font("Segoe UI", 0, 17)); // NOI18N
        serverStopBtn.setText("Stop");
        serverStopBtn.setEnabled(false);
        serverStopBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                serverStopBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        CurrStatus.setEditable(false);
        CurrStatus.setColumns(20);
        CurrStatus.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        CurrStatus.setLineWrap(true);
        CurrStatus.setRows(5);
        CurrStatus.setTabSize(4);
        CurrStatus.setWrapStyleWord(true);
        CurrStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        CurrStatus.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(CurrStatus);

        date_now.setFont(new java.awt.Font("Segoe UI Symbol", 0, 11)); // NOI18N
        date_now.setForeground(new java.awt.Color(0, 0, 255));

        jLabel8.setFont(new java.awt.Font("Segoe UI Symbol", 0, 11)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 255));
        jLabel8.setText("Date-Time ::");

        time_now.setFont(new java.awt.Font("Segoe UI Symbol", 0, 11)); // NOI18N
        time_now.setForeground(new java.awt.Color(0, 0, 255));

        jMenu1.setText("Options");

        aboutMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.SHIFT_MASK));
        aboutMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/about_menu.png"))); // NOI18N
        aboutMenu.setText("About");
        aboutMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutMenuActionPerformed(evt);
            }
        });
        jMenu1.add(aboutMenu);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/exit_menu.png"))); // NOI18N
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel7)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel5)
                                    .add(jLabel6))
                                .add(5, 5, 5)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(public_Ip_Port, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                                    .add(loc_Ip_Port))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(refreshBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jLabel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jLabel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(activeUsers, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(serverStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 470, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 12, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(portNumber)
                                    .add(serverPass))
                                .add(24, 24, 24)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(layout.createSequentialGroup()
                                        .add(portField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(jLabel3))
                                    .add(passField)))
                            .add(layout.createSequentialGroup()
                                .add(jLabel1)
                                .add(35, 35, 35)
                                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, serverStartBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, serverStopBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(21, 21, 21))))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(date_now, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(time_now, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel5)
                                    .add(loc_Ip_Port, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(5, 5, 5)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel6)
                                    .add(public_Ip_Port, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(refreshBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel10)
                                    .add(serverStatus))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel12)
                                    .add(activeUsers, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(layout.createSequentialGroup()
                                .add(2, 2, 2)
                                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(serverStartBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(portNumber)
                            .add(layout.createSequentialGroup()
                                .add(2, 2, 2)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(portField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel3))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(serverPass)
                            .add(passField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(serverStopBtn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 279, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(date_now)
                    .add(jLabel8)
                    .add(time_now))
                .add(9, 9, 9))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void serverStartBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_serverStartBtnActionPerformed
    {//GEN-HEADEREND:event_serverStartBtnActionPerformed
        boolean isBindException, isIOException, isIllegalArgument, isNullPointerException;
        isBindException = isIOException = isIllegalArgument = isNullPointerException = false;
        try
        {
            port = Integer.parseInt(portField.getText());
            ss = new ServerSocket(port);
        }
        catch(NumberFormatException e)
        {
            if(portField.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(this, "Port cannot be left Empty", "Port Error", JOptionPane.WARNING_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Port can only be a Number", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(BindException b) //for serversocket object
        {
            isBindException = true; //setted flag to true (only if ocurred)
            JOptionPane.showMessageDialog(this, "Port Already being used by some other application", "Port Already Occupied", JOptionPane.WARNING_MESSAGE);
        }
        catch(IOException e)
        {
            isIOException = true;
            JOptionPane.showMessageDialog(this, "Exception ocurred in I/O of the program\nwhile making connection request", "I/O Error", JOptionPane.WARNING_MESSAGE);
            System.out.println("IOException ocurred");
        }
        catch(IllegalArgumentException e)
        {
            isIllegalArgument = true;
            //JOptionPane.showMessageDialog(this, "Port isn't in the range specified", "Value Error", JOptionPane.WARNING_MESSAGE);
        }
        catch(NullPointerException e)
        {
            isNullPointerException = true;
        }

        if(port < 10)
        {
            JOptionPane.showMessageDialog(this, "Port isn't in the range specified", "Value Error", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            if(isBindException | isIOException | isIllegalArgument)
            {
                //DO nothing LOL, just for keeping the fact of executing nothing until user's input
            }
            if(!isBindException && !isIOException && !isIllegalArgument)
            {
                //enabling btn for use now
                refreshBtn.setEnabled(true);
                serverStartBtn.setEnabled(false);
                serverStopBtn.setEnabled(true);
                portField.setEnabled(false);
                serverStatus.setForeground(new Color(9, 110, 35));
                serverStatus.setText("Server is Running...");
                loc_Ip_Port.setText(new IpAPI().loc_Ip() + " : " + port);
                CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  Success, the Server is now listening on the port " + port + ".....");
                try
                {
                    //calling the execute method for thread creation
                    execute();
                }
                catch(Exception ex)
                {
                    Logger.getLogger(ServerMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_serverStartBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_refreshBtnActionPerformed
    {//GEN-HEADEREND:event_refreshBtnActionPerformed
        loc_Ip_Port.setText(new IpAPI().loc_Ip() + " : " + port);
        IpAPI obj = new IpAPI();
        obj.start();
        String ip = obj.pub_Ip();
        if(ip.equalsIgnoreCase("Offline"))
        {
            public_Ip_Port.setText("Offline");
        }

        else
        {
            public_Ip_Port.setText(ip + " : " + port);
        }
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void loc_Ip_PortAncestorAdded(javax.swing.event.AncestorEvent evt)//GEN-FIRST:event_loc_Ip_PortAncestorAdded
    {//GEN-HEADEREND:event_loc_Ip_PortAncestorAdded
        loc_Ip_Port.setText(new IpAPI().loc_Ip());
        IpAPI obj = new IpAPI();
        obj.start();
        String ip = obj.pub_Ip();
        if(ip.equalsIgnoreCase("Offline"))
        {
            public_Ip_Port.setText("Offline");
        }

        else
        {
            public_Ip_Port.setText(ip);
        }
        dirVerifier();
    }//GEN-LAST:event_loc_Ip_PortAncestorAdded

    private void serverStopBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_serverStopBtnActionPerformed
    {//GEN-HEADEREND:event_serverStopBtnActionPerformed

        Object choice[] =
        {
            "Yes", "No"
        };
        // Object defaultchoice = choice[0];
        //can also be specified as an Object
        int selectedValue = JOptionPane.showOptionDialog(
                rootPane,
                "Stopping can cause any client[s] connected\n"
                + "to this server to halt the connection and\n"
                + "disconnect ...!",
                "Confirm Stop Server",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                choice,
                choice[0]
        );

        if(selectedValue == JOptionPane.YES_OPTION)
        {
            try
            {
                run.interrupt();
                ss.close();
                portField.setEnabled(true);
                loc_Ip_Port.setText(new IpAPI().loc_Ip());
                serverStartBtn.setEnabled(true);
                serverStatus.setForeground(Color.red);
                serverStatus.setText("Offline");
                serverStopBtn.setEnabled(false);
                CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  Server Stopped Succesfully !\n");
                CurrStatus.append("----------------------------------------------------------------------------------------------------------");
            }
            catch(Exception ex)
            {
                Logger.getLogger(ServerMain.class.getName()).log(Level.SEVERE, null, ex);
                serverStopBtn.setEnabled(true);
            }
        }
        else if(selectedValue == JOptionPane.NO_OPTION)
        {
        }

    }//GEN-LAST:event_serverStopBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        ClosingTask();
    }//GEN-LAST:event_formWindowClosing

    private void activeUsersActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_activeUsersActionPerformed
    {//GEN-HEADEREND:event_activeUsersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_activeUsersActionPerformed

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuActionPerformed
    {//GEN-HEADEREND:event_aboutMenuActionPerformed
        new about_form().setVisible(true);
    }//GEN-LAST:event_aboutMenuActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ExitActionPerformed
    {//GEN-HEADEREND:event_ExitActionPerformed
        ClosingTask();
    }//GEN-LAST:event_ExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() ->
        {
            new ServerMain().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CurrStatus;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JComboBox<String> activeUsers;
    private javax.swing.JLabel date_now;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField loc_Ip_Port;
    private javax.swing.JTextField passField;
    private javax.swing.JTextField portField;
    private javax.swing.JLabel portNumber;
    private javax.swing.JTextField public_Ip_Port;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JLabel serverPass;
    private javax.swing.JButton serverStartBtn;
    private javax.swing.JLabel serverStatus;
    private javax.swing.JButton serverStopBtn;
    private javax.swing.JLabel time_now;
    // End of variables declaration//GEN-END:variables

    private void dirVerifier()
    {
        String default_header = "\t\t\t\t\t\t\t\t\t\t***DO NOT EDIT OR MODIFY THIS FILE OF YOUR OWN***\n\n"
                + "This file is auto generated by default through CoreServer"
                + " Application (Author: Neeraj, License MIT's License)\n" + "File created on: ["
                + DateTimeFormatter.ofPattern("hh:mm:ss a dd-MMMM-yyyy").format(LocalDateTime.now())
                + "]\nSince all the data here included in this file will get generated by default EVERYTIME we open "
                + "and close the Application (for logging purposes),Two types of record formatters are used here as >> and -- N.B\n\n"
                + "1. Firstly  >> is used as a formatting char only, and to distinguish the program opening and closing sessions.\n"
                + "2. Secondly -- means of one server deployment and then disengagement, as many consecutive deplys and disengmnts"
                + " can be done one after the other, this file gets auto incremented/appends the records each and everytime any activity is"
                + "done on the server which is getting logged into Console and then dumping it into this log file for "
                + "later Activity Assesment purposes ,You're requested to keep your time in sync as this software uses and logs "
                + "the same using underlying machine's time, if there is any discrepency in the system's time the loging will get "
                + "cluttered, for more info visit the developer's site to resolve this problem !!\n\n"
                + ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>EXECUTION-STARTS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n";
        try
        {
            CurrStatus.append("[" + forStamping.format(LocalDateTime.now()) + "]  Checking the required directories exists ??...");
            if(logDir.exists())
            {
                CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  DIR Logs/ Exists !");
                File temp[] = logDir.listFiles();
                if(temp.length > 0)
                {
                    if(logFile.exists())
                    {
                        CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  Today's named file exists ...!");
                    }
                    //can execute if todays file isn't present among others
                    else if(!logFile.exists())
                    {
                        logFile.createNewFile();
                        logFileWriter = new BufferedWriter(new FileWriter(logFile, true));
                        logFileWriter.write(default_header);
                        logFileWriter.close();
                        CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  Today's named file created Successfully ...!");
                    }
                }
                if(temp.length == 0)
                {
                    CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  No special named file[s] found in DIR /logs");
                    logFile.createNewFile();
                    logFileWriter = new BufferedWriter(new FileWriter(logFile, true));
                    logFileWriter.write(default_header);
                    logFileWriter.close();
                    CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  Today's named file created Successfully ...!");
                }
            }
            if(!logDir.exists())
            {
                logDir.mkdir();
                CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  DIR logs/ created Successfuly");
                logFile.createNewFile();
                logFileWriter = new BufferedWriter(new FileWriter(logFile, true));
                logFileWriter.write(default_header);
                logFileWriter.close();
                CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  Today's named file created Successfully ...!");
            }
            /**
             * Code for making new folder named data (will cause the client to freeze if not
             * properly used, as all the data from each other will reside here only !!
             */
            if(dataDir.exists())
            {
                CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  DIR data/ already exists ..!");
                CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  Checking is the DIR data/ empty ..? ");
                /**
                 * This above method deletes the old files in the directory named Data(if exists) in
                 * the Project's root path or AT the base directory of Main Executable file in a
                 * directory named data, and then replaces it with the new Current session's file
                 * for keeping a list of data in session for Assessment purposes
                 */
                File f[] = dataDir.listFiles();
                if(f.length == 0)
                {
                    CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  DIR data/ was already clean ...!");
                }
                else if(f.length > 0)
                {
                    CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  Detected " + f.length + " files in DIR data/");
                    CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  Deleting " + f.length + " files.... in DIR data/");
                    for(File fs : dataDir.listFiles())
                    {
                        fs.delete();
                    }
                    CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  Deletion Successfull");
                }
            }
            if(!dataDir.exists())
            {
                CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  DIR data/ not Exists ...!!");
                dataDir.mkdir();//Execute the above object
                //Failure of creation of above folder in the root path can cause
                //null pointer exception -------!!!
                CurrStatus.append("\n[" + forStamping.format(LocalDateTime.now()) + "]  Directory named " + dataDir.getPath() + " Created Succesfully");
            }
        }
        catch(IOException ex)
        {
            Logger.getLogger(ServerMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void execute() throws Exception
    {
        //Calling start Method
        Method.setClients(new ArrayList<>());
        /**
         * Will Update The fields and initialize a new Thread (Runnable) for each incoming CLient
         * request by passing it to the this-->Method-->Message-->Client Class.
         * for above details see the Project's Hierarchy.
         */
        run = new Thread(() ->
        {
            try
            {
                Method.compntPasser(CurrStatus, activeUsers);
                while(true)
                {
                    new Client(ss.accept());
                }

            }
            catch(Exception e)
            {
//                JOptionPane.showMessageDialog(
//                        ServerMain.this,
//                        "Server Closed forcefully in during mid scanning\nof incoming client requests !!",
//                        "Error", JOptionPane.WARNING_MESSAGE);
            }
        });

        run.start();
    }

    /**
     * Display the closing option before Calling closing window(frame)
     *
     * @return Nothing XD
     */
    private void ClosingTask()
    {
        Object choice[] =
        {
            "Yes", "No"
        };
        // Object defaultchoice = choice[0];
        //can also be specified as an Object
        int selectedValue = JOptionPane.showOptionDialog(
                rootPane,
                "Exiting will close this sever's session ?",
                "Confirm",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                choice,
                choice[0]
        );

        if(selectedValue == JOptionPane.YES_OPTION)
        {
            try
            {
                if(ss != null)//server was initialised somewhat before
                {
                    if(!ss.isClosed())//server is running still
                    {
                        serverStopBtn.doClick();//calling to stop the server
                    }
                }
                logFileWriter = new BufferedWriter(new FileWriter(logFile, true));
                logFileWriter.write(CurrStatus.getText() + "\n\nFile Last Opened/Modified : "
                        + DateTimeFormatter.ofPattern("HH:mm:ss").format(LocalDateTime.now())
                        + " Dated : " + DateTimeFormatter.ofPattern("dd/MMMM/yyyy").format(LocalDateTime.now())
                        + "\n-------------------------------------------------[Closed]-------------------------------------------------"
                        + "\n\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n");
                logFileWriter.close();
            }
            catch(Exception ex)
            {
                Logger.getLogger(ServerMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.exit(0);
        }
        if(selectedValue == JOptionPane.NO_OPTION)
        {
            System.out.println("Not exiting");
        }
    }
}
